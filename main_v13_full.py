#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è Assertive.Me –±–æ—Ç–∞ –¥–ª—è python-telegram-bot 13.x
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler

from config import TELEGRAM_BOT_TOKEN, MESSAGES
from validators import validator
from llm_service_v13 import llm_service_v13
from database import db_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class MessageHandlerV13:
    def __init__(self):
        self.processing_messages = {}
        self.user_requests = {}
    
    def start_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        logger.info(f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /start")
        
        try:
            update.message.reply_text(
                MESSAGES['welcome'],
                parse_mode='Markdown'
            )
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    def handle_forwarded_message(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        message = update.message
        user_id = update.effective_user.id
        logger.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
        if not message.text:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—Å–ª–∞–ª –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            message.reply_text("–Ø –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
        forward_from_chat = message.forward_from_chat
        source_chat_id = forward_from_chat.id if forward_from_chat else None
        source_chat_type = forward_from_chat.type if forward_from_chat else None
        source_chat_title = forward_from_chat.title if forward_from_chat else None
        
        logger.info(f"üìù –¢–µ–∫—Å—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª–∏–Ω–∞ {len(message.text)}): '{message.text[:100]}{'...' if len(message.text) > 100 else ''}'")
        
        self._process_message(
            update, context, message.text,
            message_type='forwarded_message',
            source_chat_id=source_chat_id,
            source_chat_type=source_chat_type,
            source_chat_title=source_chat_title
        )
    
    def handle_direct_text(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä—è–º–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞"""
        message = update.message
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –º—ã –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞
        if context.user_data.get('waiting_feedback_reason'):
            logger.info("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å")
            self.handle_feedback_reason(update, context)
            return
        
        logger.info(f"‚úçÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message.text[:50]}{'...' if len(message.text) > 50 else ''}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞
        if message.text.startswith('/'):
            logger.info(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
            return
        
        self._process_message(
            update, context, message.text,
            message_type='direct_text'
        )
    
    def _process_message(self, update: Update, context: CallbackContext, 
                        text: str, message_type: str, source_chat_id=None, 
                        source_chat_type=None, source_chat_title=None):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        try:
            processing_msg = update.message.reply_text(MESSAGES['processing'])
            self.processing_messages[user_id] = processing_msg.message_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        
        # –û—á–∏—â–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        clean_text = validator.clean_text(text)
        is_valid, validation_error = validator.is_valid_for_processing(clean_text)
        
        if not is_valid:
            self._handle_validation_error(update, context, validation_error)
            return
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —á–µ—Ä–µ–∑ LLM
            variants = llm_service_v13.generate_assertive_variants(clean_text)
            
            if not variants:
                self._send_error_message(update, context)
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            request_id = db_manager.save_request(
                user_id=user_id,
                message_type=message_type,
                request_text=clean_text,
                response_variants=variants,
                source_chat_id=source_chat_id,
                source_chat_type=source_chat_type,
                source_chat_title=source_chat_title
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–ø—Ä–æ—Å–æ–º
            self.user_requests[user_id] = request_id
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
            try:
                context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=self.processing_messages[user_id]
                )
            except:
                pass
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
            self._send_variants_with_buttons(update, context, variants)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self._send_error_message(update, context)
    
    def _handle_validation_error(self, update: Update, context: CallbackContext, error_type: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
        try:
            context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=self.processing_messages[user_id]
            )
        except:
            pass
        
        if error_type == "too_long":
            update.message.reply_text(MESSAGES['too_long'])
        elif error_type in ["too_short", "not_toxic"]:
            update.message.reply_text(MESSAGES['too_short_or_non_toxic'])
    
    def _send_error_message(self, update: Update, context: CallbackContext):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        user_id = update.effective_user.id
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
        try:
            context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=self.processing_messages[user_id]
            )
        except:
            pass
        
        update.message.reply_text(MESSAGES['error'])
    
    def _send_variants_with_buttons(self, update: Update, context: CallbackContext, variants: list):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        message_text = llm_service_v13.format_variants_message(variants)
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
        keyboard = []
        for i in range(len(variants)):
            keyboard.append([InlineKeyboardButton(f"–í—ã–±—Ä–∞—Ç—å {i+1}", callback_data=f"select_{i+1}")])
        
        keyboard.append([InlineKeyboardButton("–ù–∏ –æ–¥–∏–Ω –Ω–µ –ø–æ–¥–æ—à–µ–ª", callback_data="select_none")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    def handle_callback_query(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        user_id = update.effective_user.id
        
        query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        request_id = self.user_requests.get(user_id)
        if not request_id:
            query.edit_message_text("–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        callback_data = query.data
        
        if callback_data.startswith("select_"):
            if callback_data == "select_none":
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ù–∏ –æ–¥–∏–Ω –Ω–µ –ø–æ–¥–æ—à–µ–ª"
                query.edit_message_text(
                    query.message.text + "\n\n" + MESSAGES['feedback_request']
                )
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã
                context.user_data['waiting_feedback_reason'] = request_id
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                variant_index = int(callback_data.split("_")[1])
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                db_manager.save_feedback(request_id, selected_variant_index=variant_index)
                
                query.edit_message_text(
                    query.message.text + f"\n\n‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç {variant_index}. " + MESSAGES['feedback_thanks']
                )
                
                # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å
                if user_id in self.user_requests:
                    del self.user_requests[user_id]
    
    def handle_feedback_reason(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞ –æ—Ç –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
        request_id = context.user_data.get('waiting_feedback_reason')
        if not request_id:
            return
        
        feedback_reason = update.message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db_manager.save_feedback(request_id, feedback_reason=feedback_reason)
        
        update.message.reply_text(MESSAGES['feedback_thanks'])
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        del context.user_data['waiting_feedback_reason']
        user_id = update.effective_user.id
        if user_id in self.user_requests:
            del self.user_requests[user_id]


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ Assertive.Me (–≤–µ—Ä—Å–∏—è 13.x)...")
        
        # –°–æ–∑–¥–∞–µ–º Updater
        updater = Updater(token=TELEGRAM_BOT_TOKEN, use_context=True)
        dispatcher = updater.dispatcher
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        message_handler = MessageHandlerV13()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        logger.info("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...")
        
        # –ö–æ–º–∞–Ω–¥–∞ /start
        dispatcher.add_handler(CommandHandler("start", message_handler.start_command))
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        dispatcher.add_handler(MessageHandler(
            Filters.forwarded & Filters.text & ~Filters.command,
            message_handler.handle_forwarded_message
        ))
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä—è–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        dispatcher.add_handler(MessageHandler(
            Filters.text & ~Filters.command & ~Filters.forwarded,
            message_handler.handle_direct_text
        ))
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        dispatcher.add_handler(CallbackQueryHandler(message_handler.handle_callback_query))
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("üéØ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        updater.start_polling()
        updater.idle()
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
