#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ - –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞
"""
import urllib.parse

def test_url_encoding():
    """–¢–µ—Å—Ç URL-—ç–Ω–∫–æ–¥–∏–Ω–≥–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤"""
    test_texts = [
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
        "–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∏–∑-–∑–∞ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏",
        "–ú–Ω–µ –≤–∞–∂–Ω–æ –≤—ã—Ä–∞–∑–∏—Ç—å —Å–≤–æ—é —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É",
        "–¢–µ–∫—Å—Ç —Å emoji üòä –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏ #@$%"
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ URL-—ç–Ω–∫–æ–¥–∏–Ω–≥–∞:")
    print("=" * 50)
    
    for i, text in enumerate(test_texts, 1):
        encoded = urllib.parse.quote(text)
        tg_url = f"tg://msg?text={encoded}"
        
        print(f"{i}. –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
        print(f"   –ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {encoded}")
        print(f"   Telegram URL: {tg_url}")
        print()

def test_sharing_url():
    """–¢–µ—Å—Ç URL –¥–ª—è —à–µ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞"""
    share_url = "https://t.me/share/url?url=https://t.me/assertive_me_bot&text=–ü–æ–º–æ–≥–∞–µ—Ç%20–ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å%20—Ç–æ–∫—Å–∏—á–Ω—ã–µ%20—Å–æ–æ–±—â–µ–Ω–∏—è%20–≤%20–∞—Å—Å–µ—Ä—Ç–∏–≤–Ω—ã–µ"
    print("üîó URL –¥–ª—è —à–µ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞:")
    print(share_url)
    print()

def simulate_user_flow():
    """–°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    print("üë§ –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è:")
    print("=" * 50)
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    user_id = 12345
    variants = [
        "–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∏–∑-–∑–∞ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ —Ö–æ—Ç–µ–ª –±—ã –æ–±—Å—É–¥–∏—Ç—å —ç—Ç–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ",
        "–ú–Ω–µ –≤–∞–∂–Ω–æ –≤—ã—Ä–∞–∑–∏—Ç—å —Å–≤–æ—é —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É",
        "–Ø –±—ã —Ö–æ—Ç–µ–ª –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —É—Å—Ç—Ä–æ–∏—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
    ]
    
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –≤–∞—Ä–∏–∞–Ω—Ç—ã:")
    for i, variant in enumerate(variants, 1):
        print(f"{i}. {variant}")
    
    print("\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç 2...")
    selected_variant = variants[1]  # –∏–Ω–¥–µ–∫—Å 1 –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ 2
    encoded_text = urllib.parse.quote(selected_variant)
    
    print(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {selected_variant}")
    print(f"URL –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: tg://msg?text={encoded_text}")
    print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!")

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ AssertiveMeBot")
    print("=" * 60)
    print()
    
    test_url_encoding()
    test_sharing_url()
    simulate_user_flow()
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
