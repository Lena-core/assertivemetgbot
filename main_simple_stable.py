#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è Assertive.Me –±–æ—Ç–∞ 
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ Telegram Bot API
"""
import requests
import json
import time
import logging
from threading import Thread
import openai

from config import TELEGRAM_BOT_TOKEN, OPENAI_API_KEY, MESSAGES
from validators import validator
from database import db_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI –¥–ª—è –≤–µ—Ä—Å–∏–∏ 0.28.x
openai.api_key = OPENAI_API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class SimpleTelegramBot:
    def __init__(self, token):
        self.token = token
        self.api_url = f"https://api.telegram.org/bot{token}"
        self.last_update_id = 0
        self.user_requests = {}
        self.processing_messages = {}
    
    def send_message(self, chat_id, text, reply_markup=None, parse_mode=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        url = f"{self.api_url}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': text
        }
        
        if reply_markup:
            data['reply_markup'] = json.dumps(reply_markup)
        
        if parse_mode:
            data['parse_mode'] = parse_mode
        
        try:
            response = requests.post(url, data=data)
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    def edit_message_text(self, chat_id, message_id, text):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        url = f"{self.api_url}/editMessageText"
        data = {
            'chat_id': chat_id,
            'message_id': message_id,
            'text': text
        }
        
        try:
            response = requests.post(url, data=data)
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    def delete_message(self, chat_id, message_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        url = f"{self.api_url}/deleteMessage"
        data = {
            'chat_id': chat_id,
            'message_id': message_id
        }
        
        try:
            response = requests.post(url, data=data)
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    def answer_callback_query(self, callback_query_id):
        """–û—Ç–≤–µ—Ç –Ω–∞ callback query"""
        url = f"{self.api_url}/answerCallbackQuery"
        data = {'callback_query_id': callback_query_id}
        
        try:
            response = requests.post(url, data=data)
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")
            return None
    
    def get_updates(self, offset=None, timeout=30):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        url = f"{self.api_url}/getUpdates"
        data = {'timeout': timeout}
        
        if offset:
            data['offset'] = offset
        
        try:
            response = requests.post(url, data=data, timeout=timeout + 5)
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            return None
    
    def generate_assertive_variants(self, text):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Å—Å–µ—Ä—Ç–∏–≤–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ OpenAI"""
        try:
            prompt = f"""–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ 3 –∞—Å—Å–µ—Ä—Ç–∏–≤–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö. –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ '–Ø-—Å–æ–æ–±—â–µ–Ω–∏—è—Ö' –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–º —Ç–æ–Ω–µ, –∏–∑–±–µ–≥–∞—è –æ–±–≤–∏–Ω–µ–Ω–∏–π. –ï—Å–ª–∏ —ç—Ç–æ —á–µ–π-—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø—Ä–µ–¥–ª–æ–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞—Å—Å–µ—Ä—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–µ–≥–æ. –ï—Å–ª–∏ —ç—Ç–æ —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–µ–¥–ª–æ–∂–∏ –∞—Å—Å–µ—Ä—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –≤—ã—Ä–∞–∑–∏—Ç—å —Ç—É –∂–µ –º—ã—Å–ª—å. 

–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '{text}'

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
1. [–ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç]
2. [–≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç]  
3. [—Ç—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç]"""
            
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {
                        "role": "system",
                        "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞—Å—Å–µ—Ä—Ç–∏–≤–Ω–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ—á—å –ª—é–¥—è–º –≤—ã—Ä–∞–∂–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ –∏ –±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–∏. –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π –∏–º–µ–Ω–Ω–æ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è '–Ø-—Å–æ–æ–±—â–µ–Ω–∏—è' –∏ –∏–∑–±–µ–≥–∞—è –æ–±–≤–∏–Ω–µ–Ω–∏–π."
                    },
                    {
                        "role": "user", 
                        "content": prompt
                    }
                ],
                max_tokens=500,
                temperature=0.7
            )
            
            content = response['choices'][0]['message']['content'].strip()
            variants = self._parse_variants(content)
            
            return variants[:3] if variants else None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}")
            return None
    
    def _parse_variants(self, content):
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞ GPT"""
        import re
        variants = []
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        pattern = r'^\s*(\d+)\.?\s*(.+?)(?=^\s*\d+\.|\Z)'
        matches = re.findall(pattern, content, re.MULTILINE | re.DOTALL)
        
        for match in matches:
            variant = match[1].strip()
            if variant:
                variants.append(variant)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        if len(variants) < 3:
            lines = content.split('\n')
            variants = []
            for line in lines:
                line = line.strip()
                if line and not line.startswith(('–í–∞—Ä–∏–∞–Ω—Ç', '–û—Ç–≤–µ—Ç', '–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞')):
                    line = re.sub(r'^\d+\.?\s*', '', line)
                    if len(line) > 10:
                        variants.append(line)
        
        return variants[:3]
    
    def format_variants_message(self, variants):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        if not variants:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏."
        
        message = "‚ú® –í–æ—Ç 3 –∞—Å—Å–µ—Ä—Ç–∏–≤–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏:\n\n"
        
        for i, variant in enumerate(variants, 1):
            message += f"**{i}.** {variant}\n\n"
        
        message += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω–∏ –æ–¥–∏–Ω –Ω–µ –ø–æ–¥–æ—à–µ–ª:"
        
        return message
    
    def create_feedback_keyboard(self, variants_count):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        keyboard = []
        for i in range(variants_count):
            keyboard.append([{"text": f"–í—ã–±—Ä–∞—Ç—å {i+1}", "callback_data": f"select_{i+1}"}])
        
        keyboard.append([{"text": "–ù–∏ –æ–¥–∏–Ω –Ω–µ –ø–æ–¥–æ—à–µ–ª", "callback_data": "select_none"}])
        
        return {"inline_keyboard": keyboard}
    
    def process_message(self, chat_id, message_id, user_id, text, message_type='direct_text', 
                       source_chat_id=None, source_chat_type=None, source_chat_title=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        logger.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: '{text[:50]}{'...' if len(text) > 50 else ''}'")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        processing_response = self.send_message(chat_id, MESSAGES['processing'])
        if processing_response and processing_response.get('ok'):
            self.processing_messages[user_id] = processing_response['result']['message_id']
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        clean_text = validator.clean_text(text)
        is_valid, validation_error = validator.is_valid_for_processing(clean_text)
        
        if not is_valid:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
            if user_id in self.processing_messages:
                self.delete_message(chat_id, self.processing_messages[user_id])
            
            if validation_error == "too_long":
                self.send_message(chat_id, MESSAGES['too_long'])
            elif validation_error in ["too_short", "not_toxic"]:
                self.send_message(chat_id, MESSAGES['too_short_or_non_toxic'])
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        variants = self.generate_assertive_variants(clean_text)
        
        if not variants:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
            if user_id in self.processing_messages:
                self.delete_message(chat_id, self.processing_messages[user_id])
            self.send_message(chat_id, MESSAGES['error'])
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            request_id = db_manager.save_request(
                user_id=user_id,
                message_type=message_type,
                request_text=clean_text,
                response_variants=variants,
                source_chat_id=source_chat_id,
                source_chat_type=source_chat_type,
                source_chat_title=source_chat_title
            )
            
            self.user_requests[user_id] = request_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
        if user_id in self.processing_messages:
            self.delete_message(chat_id, self.processing_messages[user_id])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
        message_text = self.format_variants_message(variants)
        keyboard = self.create_feedback_keyboard(len(variants))
        
        self.send_message(chat_id, message_text, reply_markup=keyboard, parse_mode='Markdown')
    
    def handle_callback_query(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback query"""
        query_id = callback_query['id']
        user_id = callback_query['from']['id']
        chat_id = callback_query['message']['chat']['id']
        message_id = callback_query['message']['message_id']
        callback_data = callback_query['data']
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
        self.answer_callback_query(query_id)
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø—Ä–æ—Å–∞
        request_id = self.user_requests.get(user_id)
        if not request_id:
            self.edit_message_text(chat_id, message_id, "–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        original_text = callback_query['message']['text']
        
        if callback_data.startswith("select_"):
            if callback_data == "select_none":
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ù–∏ –æ–¥–∏–Ω –Ω–µ –ø–æ–¥–æ—à–µ–ª"
                new_text = original_text + "\n\n" + MESSAGES['feedback_request']
                self.edit_message_text(chat_id, message_id, new_text)
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                variant_index = int(callback_data.split("_")[1])
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                try:
                    db_manager.save_feedback(request_id, selected_variant_index=variant_index)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è feedback: {e}")
                
                new_text = original_text + f"\n\n‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç {variant_index}. " + MESSAGES['feedback_thanks']
                self.edit_message_text(chat_id, message_id, new_text)
                
                # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å
                if user_id in self.user_requests:
                    del self.user_requests[user_id]
    
    def handle_update(self, update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            if 'message' in update:
                message = update['message']
                chat_id = message['chat']['id']
                message_id = message['message_id']
                user_id = message['from']['id']
                
                # –ö–æ–º–∞–Ω–¥–∞ /start
                if message.get('text') == '/start':
                    self.send_message(chat_id, MESSAGES['welcome'], parse_mode='Markdown')
                    return
                
                # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if 'text' in message:
                    text = message['text']
                    
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
                    if text.startswith('/'):
                        return
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
                    message_type = 'direct_text'
                    source_chat_id = None
                    source_chat_type = None
                    source_chat_title = None
                    
                    if 'forward_from_chat' in message:
                        message_type = 'forwarded_message'
                        forward_chat = message['forward_from_chat']
                        source_chat_id = forward_chat['id']
                        source_chat_type = forward_chat['type']
                        source_chat_title = forward_chat.get('title')
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    thread = Thread(target=self.process_message, args=(
                        chat_id, message_id, user_id, text, message_type,
                        source_chat_id, source_chat_type, source_chat_title
                    ))
                    thread.start()
            
            elif 'callback_query' in update:
                self.handle_callback_query(update['callback_query'])
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Simple Telegram Bot...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        me_response = requests.get(f"{self.api_url}/getMe")
        if not me_response.json().get('ok'):
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
            return
        
        bot_info = me_response.json()['result']
        logger.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{bot_info['username']}")
        
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                updates_response = self.get_updates(offset=self.last_update_id + 1)
                
                if not updates_response or not updates_response.get('ok'):
                    time.sleep(1)
                    continue
                
                updates = updates_response['result']
                
                for update in updates:
                    self.last_update_id = update['update_id']
                    self.handle_update(update)
                
                if not updates:
                    time.sleep(1)
                    
            except KeyboardInterrupt:
                logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                time.sleep(5)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = SimpleTelegramBot(TELEGRAM_BOT_TOKEN)
        bot.run()
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
