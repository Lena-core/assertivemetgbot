#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Telegram –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—à–∏–±–∫–∏
"""
import logging
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from config import TELEGRAM_BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ /start"""
    await update.message.reply_text("ü§ñ –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")

def main():
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("üß™ –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ë–û–¢–ê")
        logger.info("=" * 30)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        logger.info(f"üîë –¢–æ–∫–µ–Ω: {TELEGRAM_BOT_TOKEN[:10]}...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        logger.info("üì± –°–æ–∑–¥–∞–µ–º Application...")
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        logger.info("‚úÖ Application —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        logger.info("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start...")
        application.add_handler(CommandHandler("start", start_command))
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        logger.info(f"   –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(application.handlers)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º polling...")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        logger.error("üìú –ü–æ–ª–Ω—ã–π traceback:")
        traceback.print_exc()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("üëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
