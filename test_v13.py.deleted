#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –≤–µ—Ä—Å–∏–∏ 13.x
"""
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def test_v13_components():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–µ—Ä—Å–∏–∏ 13.x"""
    print("üß™ –¢–ï–°–¢ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í v13.x")
    print("=" * 30)
    
    # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç telegram
    try:
        import telegram
        print(f"‚úÖ telegram: {telegram.__version__}")
        assert telegram.__version__.startswith('13.'), f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: {telegram.__version__}"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ telegram: {e}")
        return False
    
    # –¢–µ—Å—Ç 2: –ò–º–ø–æ—Ä—Ç telegram.ext
    try:
        from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
        print("‚úÖ telegram.ext –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ telegram.ext: {e}")
        return False
    
    # –¢–µ—Å—Ç 3: –ò–º–ø–æ—Ä—Ç openai
    try:
        import openai
        print(f"‚úÖ openai: {openai.version.VERSION}")
        assert openai.version.VERSION.startswith('0.28'), f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: {openai.version.VERSION}"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ openai: {e}")
        return False
    
    # –¢–µ—Å—Ç 4: –ò–º–ø–æ—Ä—Ç config
    try:
        from config import TELEGRAM_BOT_TOKEN, OPENAI_API_KEY
        print("‚úÖ config –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        print(f"   Telegram —Ç–æ–∫–µ–Ω: {TELEGRAM_BOT_TOKEN[:10]}...")
        print(f"   OpenAI –∫–ª—é—á: {OPENAI_API_KEY[:20]}...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ config: {e}")
        return False
    
    # –¢–µ—Å—Ç 5: –°–æ–∑–¥–∞–Ω–∏–µ Updater
    try:
        updater = Updater(token=TELEGRAM_BOT_TOKEN, use_context=True)
        print("‚úÖ Updater —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Updater: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # –¢–µ—Å—Ç 6: –ò–º–ø–æ—Ä—Ç llm_service_v13
    try:
        from llm_service_v13 import llm_service_v13
        print("‚úÖ llm_service_v13 –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ llm_service_v13: {e}")
        return False
    
    # –¢–µ—Å—Ç 7: –ò–º–ø–æ—Ä—Ç –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    try:
        from validators import validator
        from database import db_manager
        print("‚úÖ validators –∏ database –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
        return False
    
    print("\nüéâ –í–°–ï –¢–ï–°–¢–´ v13.x –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    return True

def test_openai_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI"""
    print("\nüîå –¢–ï–°–¢ OPENAI API...")
    try:
        from llm_service_v13 import llm_service_v13
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_text = "–¢—ã –¥—É—Ä–∞–∫, –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—à—å!"
        
        print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç: '{test_text}'")
        variants = llm_service_v13.generate_assertive_variants(test_text)
        
        if variants and len(variants) >= 1:
            print("‚úÖ OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print("üìù –ü—Ä–∏–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞:")
            print(f"   '{variants[0]}'")
            return True
        else:
            print("‚ùå OpenAI API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ï–†–°–ò–ò 13.x")
    print("=" * 40)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    components_ok = test_v13_components()
    
    if components_ok:
        response = input("\n‚ùì –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ OpenAI? (–¥–∞/–Ω–µ—Ç): ").lower()
        if response in ['–¥–∞', 'yes', 'y', '–¥']:
            openai_ok = test_openai_connection()
        else:
            openai_ok = True
            print("‚è≠Ô∏è –¢–µ—Å—Ç OpenAI –ø—Ä–æ–ø—É—â–µ–Ω")
    else:
        openai_ok = False
    
    print(f"\n{'='*40}")
    if components_ok and openai_ok:
        print("üéâ –í–°–ï –ì–û–¢–û–í–û –ö –ó–ê–ü–£–°–ö–£!")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main_v13_full.py")
    else:
        print("‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã!")
        if not components_ok:
            print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏")
        if not openai_ok:
            print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å OpenAI API")
