from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ChatAction
import asyncio
import logging
import urllib.parse

from config import MESSAGES
from validators import validator
from llm_service import llm_service
from database import db_manager

# –õ–æ–≥–≥–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
logger = logging.getLogger(__name__)

class MessageHandler:
    def __init__(self):
        self.processing_messages = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
        self.user_requests = {}  # –î–ª—è —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        logger.info(f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /start")
        
        try:
            await update.message.reply_text(
                MESSAGES['welcome'],
                parse_mode='Markdown'
            )
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    async def handle_forwarded_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        message = update.message
        user_id = update.effective_user.id
        logger.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
        if not message.text:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—Å–ª–∞–ª –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            await message.reply_text("–Ø –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
        forward_from_chat = message.forward_from_chat
        source_chat_id = forward_from_chat.id if forward_from_chat else None
        source_chat_type = forward_from_chat.type if forward_from_chat else None
        source_chat_title = forward_from_chat.title if forward_from_chat else None
        
        logger.info(f"üìù –¢–µ–∫—Å—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª–∏–Ω–∞ {len(message.text)}): '{message.text[:100]}{'...' if len(message.text) > 100 else ''}'")
        
        await self._process_message(
            update, context, message.text, 
            message_type='forwarded_message',
            source_chat_id=source_chat_id,
            source_chat_type=source_chat_type,
            source_chat_title=source_chat_title
        )
    
    async def handle_direct_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä—è–º–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞"""
        message = update.message
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞
        if message.text.startswith('/'):
            return
        
        await self._process_message(
            update, context, message.text,
            message_type='direct_text'
        )
    
    async def _process_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                             text: str, message_type: str, source_chat_id=None, 
                             source_chat_type=None, source_chat_title=None):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id,
            action=ChatAction.TYPING
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        processing_msg = await update.message.reply_text(MESSAGES['processing'])
        self.processing_messages[user_id] = processing_msg.message_id
        
        # –û—á–∏—â–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        clean_text = validator.clean_text(text)
        is_valid, validation_error = validator.is_valid_for_processing(clean_text)
        
        if not is_valid:
            await self._handle_validation_error(update, context, validation_error)
            return
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —á–µ—Ä–µ–∑ LLM
            variants = llm_service.generate_assertive_variants(clean_text)
            
            if not variants:
                await self._send_error_message(update, context)
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            request_id = db_manager.save_request(
                user_id=user_id,
                message_type=message_type,
                request_text=clean_text,
                response_variants=variants,
                source_chat_id=source_chat_id,
                source_chat_type=source_chat_type,
                source_chat_title=source_chat_title
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            self.user_requests[user_id] = {
                'request_id': request_id,
                'variants': variants
            }
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=self.processing_messages[user_id]
                )
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await self._send_variants_with_buttons(update, context, variants)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await self._send_error_message(update, context)
    
    async def _handle_validation_error(self, update: Update, context: ContextTypes.DEFAULT_TYPE, error_type: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=self.processing_messages[user_id]
            )
        except:
            pass
        
        if error_type == "too_long":
            await update.message.reply_text(MESSAGES['too_long'])
        elif error_type in ["too_short", "not_toxic"]:
            await update.message.reply_text(MESSAGES['too_short_or_non_toxic'])
    
    async def _send_error_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        user_id = update.effective_user.id
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=self.processing_messages[user_id]
            )
        except:
            pass
        
        await update.message.reply_text(MESSAGES['error'])
    
    async def _send_variants_with_buttons(self, update: Update, context: ContextTypes.DEFAULT_TYPE, variants: list):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        message_text = llm_service.format_variants_message(variants)
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
        keyboard = []
        for i in range(len(variants)):
            keyboard.append([InlineKeyboardButton(f"–í—ã–±—Ä–∞—Ç—å {i+1}", callback_data=f"select_{i+1}")])
        
        keyboard.append([InlineKeyboardButton("–ù–∏ –æ–¥–∏–Ω –Ω–µ –ø–æ–¥–æ—à–µ–ª", callback_data="select_none")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        user_id = update.effective_user.id
        
        await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_request = self.user_requests.get(user_id)
        if not user_request:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        request_id = user_request['request_id']
        variants = user_request['variants']
        callback_data = query.data
        
        if callback_data.startswith("select_"):
            if callback_data == "select_none":
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ù–∏ –æ–¥–∏–Ω –Ω–µ –ø–æ–¥–æ—à–µ–ª"
                await query.edit_message_text(
                    query.message.text + "\n\n" + MESSAGES['feedback_request']
                )
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã
                context.user_data['waiting_feedback_reason'] = request_id
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                variant_index = int(callback_data.split("_")[1])
                selected_variant = variants[variant_index - 1]  # –∏–Ω–¥–µ–∫—Å—ã —Å 0
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                db_manager.save_feedback(request_id, selected_variant_index=variant_index)
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                await self._send_selected_variant_actions(query, selected_variant, variant_index)
                
                # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å
                if user_id in self.user_requests:
                    del self.user_requests[user_id]
    
    async def _send_selected_variant_actions(self, query, selected_variant: str, variant_index: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º"""
        # URL-—ç–Ω–∫–æ–¥–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram URL
        encoded_text = urllib.parse.quote(selected_variant)
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ
        response_text = (
            query.message.text + 
            f"\n\n‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç {variant_index}!\n\n"
            f"üí¨ **–í–∞—à –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n_{selected_variant}_\n\n"
            "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –¢–µ–∫—Å—Ç –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏!"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [
                InlineKeyboardButton(
                    "üìù –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", 
                    url=f"tg://msg?text={encoded_text}"
                )
            ],
            [
                InlineKeyboardButton(
                    "‚úâÔ∏è –ü–µ—Ä–µ—Å–ª–∞—Ç—å –≤ –ª—é–±–æ–π —á–∞—Ç", 
                    url=f"tg://msg?text={encoded_text}"
                )
            ],
            [
                InlineKeyboardButton(
                    "ü§ñ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º", 
                    url="https://t.me/share/url?url=https://t.me/assertive_me_bot&text=–ü–æ–º–æ–≥–∞–µ—Ç%20–ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å%20—Ç–æ–∫—Å–∏—á–Ω—ã–µ%20—Å–æ–æ–±—â–µ–Ω–∏—è%20–≤%20–∞—Å—Å–µ—Ä—Ç–∏–≤–Ω—ã–µ"
                )
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            response_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def handle_feedback_reason(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞ –æ—Ç –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
        if 'waiting_feedback_reason' not in context.user_data:
            return
        
        request_id = context.user_data['waiting_feedback_reason']
        feedback_reason = update.message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db_manager.save_feedback(request_id, feedback_reason=feedback_reason)
        
        await update.message.reply_text(MESSAGES['feedback_thanks'])
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        del context.user_data['waiting_feedback_reason']
        user_id = update.effective_user.id
        if user_id in self.user_requests:
            del self.user_requests[user_id]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
message_handler = MessageHandler()
